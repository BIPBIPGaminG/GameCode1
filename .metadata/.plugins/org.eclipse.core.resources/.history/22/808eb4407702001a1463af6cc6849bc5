package fr.bipbipgaming.engine.io;

import static org.lwjgl.glfw.GLFW.*;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWVidMode;
import org.lwjgl.glfw.GLFWWindowSizeCallback;
import org.lwjgl.opengl.GL11;

import static org.lwjgl.opengl.GL.*;

public class Window {
	
	private int width,height;
	private String title;
	private long window;
	public static int frames;
	public static long time;
	public Input input;
	private float backgroundR, backgroundG, backgroundB;
	private GLFWWindowSizeCallback sizeCallback;
	public int[] windowPosX = {0}, windowPosY = {0};
	private boolean isResized;
	private boolean isFullscreen;
	
	public Window(int width, int height, String title) {
		
		this.width = width;
		this.height= height;
		this.title = title;
		
	}
	
	public void create() {
		
		time = System.currentTimeMillis();
		
		if(!glfwInit()) {
			System.err.println("Error: GLFW wasn't initialized !");
			return;
		}
		
		input = new Input();
		
		window = glfwCreateWindow(width, height, title, 0, 0);
		
		if (window == 0) {
			System.err.println("Error: Window wasn't created !");
			return;
		}
		
		GLFWVidMode videoMode = glfwGetVideoMode(glfwGetPrimaryMonitor());
		glfwSetWindowPos(window, (videoMode.width() - width) / 2, (videoMode.height() - height) / 2);
		glfwMakeContextCurrent(window);
		createCapabilities();
		
		createCallback();
		
		glfwShowWindow(window);
		
		glfwSwapInterval(1);
		
	}
	
	private void createCallback() {
		
		sizeCallback = new GLFWWindowSizeCallback() {
			
			@Override
			public void invoke(long window, int w, int h) {
				
				width = w;
				height = h;
				isResized = true;
				
			}
		};
		
		glfwSetKeyCallback(window, input.getKeyboardCallback());
		glfwSetMouseButtonCallback(window, input.getMouseButtonsCallback());
		glfwSetCursorPosCallback(window, input.getMouseMoveCallback());
		glfwSetWindowSizeCallback(window, sizeCallback);
		
	}
	
	public void update() {
		if (isResized) {
			GL11.glViewport(0, 0, width, height);
			isResized = false;
			if (isFullscreen) {
				glfwSetWindowMonitor(window, glfwGetPrimaryMonitor(), 0, 0, width, height, 0);
			}
		}
		GL11.glClearColor(backgroundR, backgroundG, backgroundB, 1.0F);
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
		glfwPollEvents();
		
		frames++;
		if (System.currentTimeMillis() > time + 1000) {
			
			glfwSetWindowTitle(window, title + "  fps: " + frames);
			time = System.currentTimeMillis();
			frames = 0;
			
		}
		
	}
	
	public void swapBuffers() {
		
		glfwSwapBuffers(window);
		
	}
	
	public boolean shouldClose() {
		
		return glfwWindowShouldClose(window);
		
	}
	
	public void destroy() {
		input.destroy();
		glfwWindowShouldClose(window);
		glfwDestroyWindow(window);
		glfwTerminate();
	}
	
	public void setBackgroundColor(float r, float g, float b) {
		
		backgroundR = r;
		backgroundG = g;
		backgroundB = b;
		
	}

	public boolean isFullscreen() {
		return isFullscreen;
	}

	public void setFullscreen(boolean isFullscreen) {
		this.isFullscreen = isFullscreen;
		isResized = true;
		if (isFullscreen) {
			glfwGetWindowPos(window, windowPosX, windowPosY);
			glfwSetWindowMonitor(window, GLFW.glfwGetPrimaryMonitor(), 0, 0, width, height, 0);
		}else {
			glfwSetWindowMonitor(window, 0, windowPosX[0], windowPosY[0], width, height, 0);
		}
	}

	public int getWidth() {
		return width;
	}

	public int getHeight() {
		return height;
	}

	public String getTitle() {
		return title;
	}

	public long getWindow() {
		return window;
	}
	
	
	
}
